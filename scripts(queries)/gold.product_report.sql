/*
=============================================================
Product Report - Business Intelligence View
=============================================================
Purpose:
This report consolidates key product metrics and behaviors, enabling 
better decision-making on product performance.

Highlights:
1. Extracts key product attributes (name, category, subcategory, cost).
2. Segments products based on revenue into High-Performers, Mid-Range, and Low-Performers.
3. Aggregates crucial product-level metrics:
   - Total orders
   - Total sales revenue
   - Total quantity sold
   - Total unique customers
   - Product lifespan (in months)
4. Calculates important KPIs:
   - Recency (months since last sale)
   - Average order revenue
   - Average monthly revenue

This view is built on the **Gold Layer** of the Medallion Architecture.
*/

CREATE VIEW gold.product_report AS

-- Step 1: Extract relevant sales and product data
WITH base AS (
    SELECT 
        p.product_key,  
        p.product_name,
        p.category,
        p.subcategory,
        p.cost,
        s.order_date,
        s.sales_amount,
        s.quantity,
        s.customer_key,
        s.order_number
    FROM gold.fact_sales s
    LEFT JOIN gold.dim_products p 
        ON s.product_key = p.product_key
    WHERE s.order_date IS NOT NULL
),

-- Step 2: Aggregate product-level metrics
Aggregations AS (
    SELECT 
        product_key, 
        product_name,
        category,
        subcategory,
        cost,
        
        -- Determine the last order date for each product
        MAX(order_date) AS Last_order,
        
        -- Calculate product lifespan in months (time span between first and last sale)
        DATEDIFF(MONTH, MIN(order_date), MAX(order_date)) AS Life_span,
        
        -- Compute total revenue generated by each product
        SUM(sales_amount) AS Total_revenue,
        
        -- Compute total quantity of products sold
        SUM(quantity) AS Total_quantity_sold,
        
        -- Count unique customers who purchased the product
        COUNT(DISTINCT customer_key) AS Total_customers,
        
        -- Count distinct orders containing this product
        COUNT(DISTINCT order_number) AS Total_orders,
        
        -- Calculate the average selling price per unit (avoiding division by zero)
        ROUND(AVG(CAST(sales_amount AS FLOAT) / NULLIF(quantity, 0)), 1) AS Avg_selling_price
    FROM base
    GROUP BY product_key, product_name, category, subcategory, cost
)

-- Step 3: Compute additional KPIs and categorize products based on revenue performance
SELECT 
    product_key, 
    product_name,
    category,
    subcategory,
    cost,
    Last_order,
    Life_span,

    -- Recency: Months since the last order was placed
    DATEDIFF(MONTH, Last_order, GETDATE()) AS Recency,

    -- Product performance categorization based on total revenue
    CASE 
        WHEN Total_revenue > 5000 THEN 'HIGH-PERFORMERS'
        WHEN Total_revenue <= 5000 THEN 'MID-RANGE'
        ELSE 'LOW-PERFORMERS'
    END AS Product_Category,

    Total_revenue,
    Total_quantity_sold,
    Total_customers,
    Total_orders,
    Avg_selling_price,

    -- Compute average revenue per order (handling division by zero)
    CASE 
        WHEN Total_orders = 0 THEN 0
        ELSE Total_revenue / Total_orders 
    END AS Average_order_revenue,

    -- Compute average monthly revenue (handling division by zero)
    CASE 
        WHEN Life_span = 0 THEN 0
        ELSE Total_revenue / Life_span 
    END AS Average_monthly_revenue

FROM Aggregations;
